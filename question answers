1. Java-язык программирования - выдуманный язык, посредством которого можно 
создавать и выполнять на компьютере невероятной сложностит программы. Java-
платформа - набор программ, с помощью которых можно создавать другие программы
на языке java.

2. Имя файла и класса в нем совпадают. Если в файле несколько классов то в 
некоторый момент для этих классов создаются отдельные файлы.

3. JVM - виртуальная машина исполняющая байт код. JRM - среда выполнения,
минимальная реализайия виртуальной машины, позволяющая исполнять приложения.
виртуальная машина + библиотеки. JDK комплект разработчика. JRM + компилятор,
библиотеки, документация и д.р. кроме IDE.

4. Компилируем приложение, предварительно перейдя в директорию где лежит файл,
"javac FileName.java". Появляется файл "FileNmae.class". Запускаем приложение
"java FileName". В переменных среды прописывам путь к jdk чтобы консоль понимала
команды java, javac.

5. Видимость классов, функций, полей. Private видимость только внутри класса.
Public видимость везде. Protected видимость в пакете и наследниках. По умолчанию
только в пакете.

6.Пакеты в java-пограмме наборы классов, разделенные по некоторым принципам. Пакеты
на диске это папки с вложенными java-файлами. наименование строчными буквами, первая
папка именуется доменом верхнего уровня, подчеркивание при недопустисых символах.
Правая кнопка по папке "create package".

7. Импортируются только используемые классы, интерфейсы, перечисления. Используется
команда "import". Не влияет. В котором лежит файл.

8. "объект" - область памяти, в которой лежит инициализированный экземпляр, "ссылка
на объект" - адрес этой области памяти.

9. byte, short, int, long, float, double, boolean, char. Создание "int a". При 
передаче примитивного типа как параметра функции, передается значение.
"func(int a)".

10. long, double 64; int, float 32; short, char 16; byte, boolean 8. Не зависит от
разрядности платформы. При совершеии различных действий с примитивами,может тип
результата отличаться от входного. Конструкция "(тип)". Boolean не приводится.

11. short a; int b = a; неявное; a = (short) b; явное.

12. Целочисленные литералы (11 - десятичный, 043 - восьмеричный, 0x32 - 16-ный),
long 123L. Дробные float 12f, 0.2e-2. Символьные 'a', спецсимволы. Булевые.

13. Возвращается тип использованных в выражении литералов + приведение, что
приводит к ошибкам.

14. Отображение примитивов, объекты, дополнителльный функционал. Нельхя изменить
после создания.

15. Разница в типе хранения - ссылочный и по значению. Ссылочный может изменятся.
Оригинал не поменяется.

16. Перевод в оболочечный тип и назад.

17. + - / * % ++ -- && || < > == != >> << >>> & | ^ ~ ?: +=. Таблица приоритетов операторов.
По порядку. 

18. помнить про приведение типов. получение infinity NaN. Специальная функция оболочки
или вывести.

19. static import. Можно ссылаться на статические члены класса и интерфейсы.

20. if(boolean){}else if{}else{}; switch(int, short, char, byte, String, enum, обертки)
{case(1): ;break; case(2): ;break; default: break;}; while(boolean){}; do{}while(boolean);
for(int i; boolean; i++); for(int i: int[]){};

21. ПРоверка типа объекта. false.
